Exercise 1.2: Data Types in Python
Learning Goals

●	Explain variables and data types in Python
●	Summarize the use of objects in Python
●	Create a data structure for your Recipe app

Reflection Questions

1.	Imagine you’re having a conversation with a future colleague about whether to use the iPython Shell instead of Python’s default shell. What reasons would you give to explain the benefits of using the iPython Shell over the default one?

The IPython shell provides more guidance than the default Python shell. 
Syntax highlighting, auto-indentation, and better traceback errors also make debugging and learning from errors more manageable.
Ease of use and readability. 
The IPython shell also lets you test small chunks of code quickly and easily.


2.	Python has a host of different data types that allow you to store and organize information. List 4 examples of data types that Python recognizes, briefly define them, and indicate whether they are scalar or non-scalar.

int:	Integer (whole number)	Scalar
float:	Decimal number	Scalar
str: String of characters (numbers or letters)	Non-Scalar
bool:	Boolean (true/false statements)	Non-Scalar


3.	A frequent question at job interviews for Python developers is: what is the difference between lists and tuples in Python? Write down how you would respond.

The primary difference is that lists are mutable, meaning their elements can be changed, added, or removed after the list is created. 
Tuples are immutable which means they cannot be modified.  Lists are created with square brackets while tuples use parentheses.  
Because tuples are immutable, they are generally faster than lists in terms of iteration and access.


4.	In the task for this Exercise, you decided what you thought was the most suitable data structure for storing all the information for a recipe. Now, imagine you’re creating a language-learning app that helps users memorize vocabulary through flashcards. Users can input vocabulary words, definitions, and their category (noun, verb, etc.) into the flashcards. They can then quiz themselves by flipping through the flashcards. Think about the necessary data types and what would be the most suitable data structure for this language-learning app. Between tuples, lists, and dictionaries, which would you choose? Think about their respective advantages and limitations, and where flexibility might be useful if you were to continue developing the language-learning app beyond vocabulary memorization. 


For a language-learning app that uses flashcards to help users memorize vocabulary, the most suitable data structure would be a dictionary.  
In a dictionary, each vocabulary word can serve as a key, with its definition stored as values.  
Dictionaries are also highly flexible, making them well-suited for potential future expansion of the app.  
Since dictionaries are mutable, we can easily update them as users add, modify, or delete flashcards.
