Exercise 1.5: Object-Oriented Programming in Python
Learning Goals

●	Apply object-oriented programming concepts to your Recipe app

Reflection Questions

1.	In your own words, what is object-oriented programming? What are the benefits of OOP?

The process of abstracting data and methods into classes.  Within Python, everything is an object, based on a class.

Benefits:
	Code can be reused through inheritance which saves time.
	Adding new features or functionality is more straightforward.
	Objects can be developed and maintained independently, making the codebase easier to manage and scale.

2.	What are objects and classes in Python? Come up with a real-world example to illustrate how objects and classes work.
Classes: A class is a template for creating objects. It defines the behavior and structure that the objects created from the class will have.
Objects: An object is an instance of a class. It represents a specific entity that has the behaviors and properties defined by the class.
Example: Car
The car class can be the blueprint for all cars. 
It defines the attributes and behaviors that any car would have, such as model, make, color, and methods like start(), stop(), and drive().

3.	In your own words, write brief explanations of the following OOP concepts; 100 to 200 words per method is fine. 

Method	Description
Inheritance:	
Inheritance allows a class (called the subclass or inherited class) to inherit properties and behaviors from another class (called the parent or base class). 
The child class inherits all the methods and attributes of the parent class but can also define its own attributes or override the parent’s methods.

Polymorphism:
Polymorphism allows objects of different classes to be treated as objects of a common superclass. 
It enables the same method or data attribute to have different implementations based on the object calling it but can retain the same name.

Operator Overloading:	
Operator overloading allows Python’s built-in operators to have custom behaviors or methods for user-defined objects. 
For example: __add__() or __sub__(), would equal to adding and subtracting respectively.
